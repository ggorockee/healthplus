---
alwaysApply: true
---

### HealthPlus Cursor Rules

- **응답 언어**: 항상 한국어로 명확하고 친절하게 답변한다.
- **작업 방식**: 확인 요청 없이 자율적으로 끝까지 수행한다.
- **변경 용어**: 코드 변경은 "edits"라고 지칭한다.
- **코드 표기**: 파일/디렉토리/함수/클래스 이름은 백틱(`)으로 감싼다.
- **마크다운**: 코드 스니펫은 올바른 펜싱(언어 태그 포함)을 사용한다.

### 커밋 규칙
- **언어**: 모든 커밋 메시지는 한국어로 작성한다.
- **단위**: 하나의 의미 있는 변경 단위마다 커밋한다.
- **예시**: `chore: Cursor 규칙 파일 추가`, `feat: 로그인 화면 상태 관리 개선`.

### 코드 스타일
- **표준 준수**: Dart/Flutter 공식 스타일 + `analysis_options.yaml` 준수.
- **const 사용**: 가능하면 const 생성자/리터럴 사용.
- **위젯 최적화**: 불필요한 위젯 래핑 지양, 빌드 경로 계산 최소화.
- **에러 처리**: 비동기 로직에 try-catch, 사용자 친화적 메시지 제공.

### 프로젝트 구조
- `lib/models/`: 데이터 모델
- `lib/providers/`: Riverpod 프로바이더
- `lib/screens/`: 화면 위젯
- `lib/services/`: 외부 서비스 연동
- `lib/widgets/`: 재사용 위젯
- `lib/config/`: 환경/설정

### 문서/주석
- **주석 언어**: 한국어
- **명명 규칙**: 식별자는 영어, 설명/문서는 한국어
- **공개 API**: 공개 함수/클래스에 간단한 설명 주석 추가

### 리뷰 체크리스트
- 상태 변경이 빌드 성능에 미치는 영향 확인
- 널 안전 및 예외 처리 점검
- 라우팅/내비게이션 경로 유효성 검증
- 민감 정보(키/토큰/URL) 하드코딩 금지


### HealthPlus Cursor Rules

- **응답 언어**: 항상 한국어로 명확하고 친절하게 답변한다.
- **작업 방식**: 확인 요청 없이 자율적으로 끝까지 수행한다.
- **변경 용어**: 코드 변경은 "edits"라고 지칭한다.
- **코드 표기**: 파일/디렉토리/함수/클래스 이름은 백틱(`)으로 감싼다.
- **마크다운**: 코드 스니펫은 올바른 펜싱(언어 태그 포함)을 사용한다.

### 커밋 규칙
- **언어**: 모든 커밋 메시지는 한국어로 작성한다.
- **단위**: 하나의 의미 있는 변경 단위마다 커밋한다.
- **예시**: `chore: Cursor 규칙 파일 추가`, `feat: 로그인 화면 상태 관리 개선`.

### 코드 스타일
- **표준 준수**: Dart/Flutter 공식 스타일 + `analysis_options.yaml` 준수.
- **const 사용**: 가능하면 const 생성자/리터럴 사용.
- **위젯 최적화**: 불필요한 위젯 래핑 지양, 빌드 경로 계산 최소화.
- **에러 처리**: 비동기 로직에 try-catch, 사용자 친화적 메시지 제공.

### 프로젝트 구조
- `lib/models/`: 데이터 모델
- `lib/providers/`: Riverpod 프로바이더
- `lib/screens/`: 화면 위젯
- `lib/services/`: 외부 서비스 연동
- `lib/widgets/`: 재사용 위젯
- `lib/config/`: 환경/설정

### 문서/주석
- **주석 언어**: 한국어
- **명명 규칙**: 식별자는 영어, 설명/문서는 한국어
- **공개 API**: 공개 함수/클래스에 간단한 설명 주석 추가

### 리뷰 체크리스트
- 상태 변경이 빌드 성능에 미치는 영향 확인
- 널 안전 및 예외 처리 점검
- 라우팅/내비게이션 경로 유효성 검증
- 민감 정보(키/토큰/URL) 하드코딩 금지


### 디자인 시스템 사용 규칙 (Design System Rules)

- **테마 강제 적용**
  - 앱 전역 테마는 `lib/config/theme.dart`의 `buildLightTheme()`를 통해 적용한다.
  - 색상/타이포는 반드시 `AppColors`, `AppTypography`를 참조한다. 직접 색상 hex, 폰트 사이즈/가중치 하드코딩 금지.

- **공용 위젯 우선 사용 (`lib/widgets/`)**
  - 버튼: `AppButton` 사용. `ElevatedButton`/`OutlinedButton` 직접 사용 금지(스펙 확장 필요시 `AppButton`에 반영).
  - 텍스트: `AppText` 또는 `Theme.of(context).textTheme` 조합 사용. 임의 TextStyle 하드코딩 금지.
  - 카드: `AppCard` 사용. 카드 라운드/그림자/색상은 테마 기준 준수.
  - 칩: `AppChip` 사용. 선택/비선택 색상은 토큰 기반으로만.
  - 입력: `AppInput` 사용. 입력 스타일은 `InputDecorationTheme` 준수.
  - 하단탭: `AppBottomNav` 사용. 탭 항목 확장 시 동일 스타일 유지.

- **레이아웃/색상 가이드**
  - 기본 배경: `AppColors.surface` 또는 `surfaceAlt` 사용.
  - 다크/딥 배경 필요 시 `AppColors.surfaceDark` 사용. 텍스트 대비(AAA/AA) 확인.
  - 간격(padding/margin)은 8 배수 원칙(8, 16, 24, 32) 권장.

- **예외 허용 절차**
  - 공용 위젯/토큰으로 해결이 어려운 요구사항이 있을 경우, PR 설명에 “디자인 시스템 예외 사유”를 명시하고, 먼저 나(어시스턴트)에게 확인 요청할 것.
  - 본 규칙에 부합하지 않는 사용을 감지하면, 구현을 중단하지 않고 임시 구현 후 반드시 리뷰 코멘트로 문의한다.

- **Figma 우선 원칙**
  - `lib/widgets/`의 공용 컴포넌트로 적절히 표현되지 않거나 어울리지 않는 경우, 연결된 Figma 디자인을 우선한다.
  - 이 경우에도 색상/타이포/간격 등 토큰(`AppColors`, `AppTypography`)을 최대한 준수하고, 필요 시 해당 컴포넌트를 `lib/widgets/`로 추출해 재사용 가능하도록 개선한다.
  - Figma 우선 적용이 필요한 사유와 차이를 PR 설명에 명시한다.

- **검증 체크리스트(자동/리뷰)**
  - 새 위젯 추가 시: 토큰(`AppColors`/`AppTypography`)만 사용했는지 확인.
  - 기존 머티리얼 위젯 직접 사용 시: 동일 기능이 `lib/widgets/`에 없는지 확인 후, 없으면 `App*` 컴포넌트로 추출.
  - 입력/버튼/칩 라벨: 레터스페이싱/가중치가 Figma 스펙과 일치하는지 확인.

