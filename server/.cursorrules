# OneDayPillo API 프로젝트 개발 규칙

## 핵심 원칙

### 1. 테스트 우선 원칙 (Test-First Principle)
- **모든 Python 파일(.py) 변경 후 커밋 전에 반드시 단위 테스트 실행**
- 테스트 실행 명령어:
  ```bash
  conda activate onedaypillo
  export DATABASE_URL="sqlite+aiosqlite:///./test.db"
  export JWT_SECRET_KEY="test-secret-key-for-development-only"
  python -m pytest tests/ -v
  ```

### 2. 테스트 무결성 보장 (Test Integrity)
- **⚠️ 매우 중요: 테스트에 성공하기 위해 테스트 코드를 수정하지 말 것**
- 테스트가 실패하면 코드를 수정하여 테스트를 통과시켜야 함
- 테스트는 코드의 정확성을 검증하는 기준이므로 변경 금지

### 3. 테스트 수정 시 승인 절차
- **⚠️ 매우 중요: 테스트 수정이 필요한 경우 반드시 사용자에게 먼저 문의**
- 테스트 수정 사유와 내용을 명확히 설명하고 승인을 받은 후 진행
- 테스트 수정은 예외적인 상황에서만 허용됨

## 개발 워크플로우

### 코드 변경 시 필수 절차
1. **코드 수정**
2. **단위 테스트 실행** (위 명령어 사용)
3. **모든 테스트 통과 확인**
4. **커밋 및 푸시**

### 테스트 실패 시 대응
- 테스트 실패 → 코드 로직 수정 → 테스트 재실행
- 테스트 수정은 절대 금지
- 테스트 수정이 필요한 경우 사용자에게 문의

## 프로젝트 구조

### 테스트 파일 구성
```
tests/
├── conftest.py              # 테스트 설정 및 픽스처
├── test_api.py              # 통합 테스트 및 에러 핸들링
├── test_auth_api.py         # 인증 관련 테스트
├── test_medication_api.py   # 약물 관리 테스트
├── test_reminder_api.py     # 알림 및 리마인더 테스트
├── test_analytics_api.py    # 통계 및 분석 테스트
└── test_system_api.py       # 시스템 관련 테스트
```

### 테스트 환경
- **데이터베이스**: SQLite (테스트 전용, 자동 생성/삭제)
- **격리**: 각 테스트는 독립적인 데이터베이스 세션 사용
- **롤백**: 테스트 후 자동 롤백으로 데이터 격리 보장

## 코드 품질 기준

### Python 코딩 컨벤션
- **datetime 사용**: `datetime.utcnow()` 대신 `datetime.now(timezone.utc)` 사용
- **타입 힌트**: 모든 함수에 타입 힌트 적용
- **문서화**: 모든 클래스와 함수에 docstring 작성
- **에러 처리**: 적절한 예외 처리 및 에러 응답

### API 응답 형식
- 모든 API는 표준화된 `APIResponse` 스키마 사용
- 성공 응답: `{"success": true, "data": {...}, "message": "..."}`
- 에러 응답: `{"success": false, "error": {...}}`

## 금지 사항

### 절대 금지
1. **테스트 코드 수정으로 테스트 통과시키기**
2. **테스트 수정 없이 코드 변경 커밋하기**
3. **테스트 실행 없이 코드 변경 커밋하기**

### 예외 상황
- 테스트 수정이 정말 필요한 경우에만 사용자 승인 후 진행
- 예: API 스펙 변경, 새로운 요구사항 반영 등

## 연락처
- 개발 관련 문의: woohyeon@woohalabs.com
- 테스트 수정 승인 요청 시 반드시 이 이메일로 문의

## 참고 문서
- API 명세서: `docs/API_SPECIFICATION.md`
- 테스트 명세서: `docs/TEST_SPECIFICATION.md`
- Flutter API 가이드: `FLUTTER_API_GUIDE.md`

---

**기억하세요: 테스트는 코드의 품질을 보장하는 가장 중요한 기준입니다. 테스트를 수정하지 말고, 코드를 테스트에 맞게 수정하세요.**
